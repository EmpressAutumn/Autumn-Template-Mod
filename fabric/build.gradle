plugins {
    id 'multiloader-loader'
    id 'fabric-loom' version '1.6-SNAPSHOT'
}
dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
}
sourceSets {
    main {
        resources {
            srcDir(project(":common").file("src/main/generated"))
            exclude("**/.cache")
        }
    }
}
loom {
    def aw = project(":common").file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("runs/client")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("runs/server")
        }
    }
    runs {
        create("data") {
            inherit(getByName("client"))
            name("Data Generation")
            property("fabric-api.datagen")
            property("fabric-api.datagen.modid", mod_id)
            property("fabric-api.datagen.output-dir", project(":common").file("src/main/generated").absolutePath)
            property("fabric-api.datagen.strict-validation")
            property("fabric-api.datagen.assets-dir", project(":common").file("src/main/resources/assets").absolutePath)
        }
    }
}
